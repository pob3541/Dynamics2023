% Created by Tian Wang on Dec. 27, 2022. Use validation trials of LFADS
% trajectories and calculate variance explained between LFADS reconstructed
% firing rates and PSTH from recording

% pre-process raw raster plot to generate PSTH: convolve firing rate with a
% gaussian kernel 


% load data
%close all; clear; clc;

% lfadsR = load('~/Desktop/lfadPM.mat').pm;
% raw = load('~/Desktop/14October2013_Data.mat').forGPFA;


function lfadsSingleTrialVarianceExplained(folder)
%folder = dir('~/Desktop/multiSessionLFADS/*.mat');

allR2 = [];
allR2Shuffle = [];

for sessId = 1:length(folder)
lfadsR = load([folder(sessId).folder '/' folder(sessId).name]);
% raw = load(['/net/derived/tianwang/LFADSdata/' lfadsR.subject]).forGPFA;

%% 
% extract raster plot
raster = lfadsR.rawCounts;

% extract raster from original dataset
% trials_data = raw.dat; 
% raster = [];
% for ii = 1:length(trials_data)
%     raster(:,:,ii) = trials_data(ii).spikes;
% end


% bin_size = 10;
% seq = getSeq(trials_data, bin_size);
% 
% spikeCounts = [];
% for ii = 1 : length(seq)
%     spikeCounts(ii,:,:)= seq(ii).y;
% end
%%

Idx = lfadsR.validInds;
rates = lfadsR.rates;

% test rates: firing rates generated by lfads in validation set
testRates = rates(:,:,Idx);
% testPSTH: raw raster plot of recording
testPSTH = raster(:,:,Idx);

g = normpdf([-0.1:0.001:0.1], 0, 0.02);
psth = [];
% generate psth: convolve data
for ii = 1:size(testPSTH,1)
    for jj = 1:size(testPSTH,3)
        temp = squeeze(testPSTH(ii,:,jj));
        psth(ii,:,jj) = conv(temp, g, 'same');
    end
end

psth = psth(:,1:10:(end-2),:);
%% plot psth on firing rate
% unit = 4;
% figure; hold on
% plot(squeeze(testRates(unit,:,24)),'k')
% plot(squeeze(psth(unit,:,24)),'m-')
%% calculate regression

% % for each trials and each unit, calculate 1 R2
% R2 = zeros(size(testRates,1), size(testRates,3));
% 
% for idx = 1:size(testRates,3)
%     % psth for 1 trial
%     x = squeeze(psth(:,:,idx));
%     % loop all units
%     for id = 1:size(testRates,1)
%         xnew = x(id,:)';
%         x_hat = squeeze(testRates(id,:,idx))';
%         temp = corrcoef(xnew, x_hat);
%         r2 = (temp(1,2))^2;
%         R2(id, idx) = r2;
%     end
% end



% for each session, calculate 1 R2
R = corrcoef(psth(:,10:end-10,:), testRates(:,10:end-10,:));
R2 = R(1,2)


% check R2 manually applying formula of R2
% t1 = psth(:,10:end-10,:);
% t2 = testRates(:,10:end-10,:);
% SSR = sum((t1 - t2).^2,'all');
% SST = sum((t1 - mean(t1, 'all')).^2, 'all');
% R2 = 1-SSR/SST;

allR2 = [allR2, R2];

%% R2 for each unit

% for n=1:size(psth,1)
%     
%     R2perNeuron = corrcoef(psth(n,:,:), testRates(n,:,:));
%     R2v(n) = R2perNeuron(1,2).^2;
% end
%% shuffle data

% R2s = zeros(100, size(testRates,1), size(testRates,3));
% for permId = 1:100
%     fprintf('.');
%     % shuffle unit ID
%     shuffledPSTH = psth(randperm(size(psth,1)),:,:);
%     for id = 1:size(testRates,1)
%         for idx = 1:size(testRates,3)
%             % x: psth after shuffle
%             x = squeeze(shuffledPSTH(id,:,idx));
%             x_hat = squeeze(testRates(id,:,idx))';
%             temp = corrcoef(x, x_hat);
%             r2 = (temp(1,2))^2;
%             R2s(permId, id, idx) = r2;
%         end
%     end
% end


% for each session, calculate 1 R2
R2s = zeros(100,1);
for permId = 1:100
    fprintf('.');
    % shuffle unit ID
    shuffledPSTH = psth(randperm(size(psth,1)),10:end-10,:);
    testRatesMid = testRates(:,10:end-10,:);
    
    
    temp = corrcoef(shuffledPSTH, testRatesMid);
    r2 = (temp(1,2));
    
    
%     SSR = sum((testRatesMid - shuffledPSTH).^2,'all');
%     SST = sum((testRatesMid - mean(testRatesMid, 'all')).^2, 'all');
%     r2 = 1-SSR/SST;
    
    R2s(permId) = r2;
end

% 99 percentile of shuffled data
prctile(R2s, [99,1])

allR2Shuffle = [allR2Shuffle; prctile(R2s, [99,1])];
end
%% dot plot: x axis as 99 percentile shuffle; y axis as correlation

figure; hold on
plot(allR2Shuffle(:,1), allR2, 'r.');
% plot diagonal
plot([1 0], [1 0], 'k--')
xlim([0,1])
ylim([0,1])


% cosmetic code
yLower = 0;
yUpper = 1;
ylimit = [yLower, yUpper];
hLimits = [0 1];
hTickLocations = 0:0.5:1;
hLabOffset = 0.05;
hAxisOffset = yLower-0.01;
hLabel = "Shuffled correlation coefficient (r)"; 

vLimits = ylimit;
vTickLocations = [yLower (yLower + yUpper)/2 yUpper];
vLabOffset = 0.1;
vAxisOffset = 0;
vLabel = "Correlation coefficient (r)"; 

plotAxis = [1 1];

[hp,vp] = getAxesP(hLimits,...
    hTickLocations,...
    hLabOffset,...
    hAxisOffset,...
    hLabel,...
    vLimits,...
    vTickLocations,...
    vLabOffset,...
    vAxisOffset,...
    vLabel, plotAxis);

set(gcf, 'Color', 'w');
axis off; 
axis square;
axis tight;
end

% print('-painters','-depsc',['~/Desktop/', 'lfadsRatesR2PSTH','.eps'], '-r300');


% generate source excel data
% lfadsr = [allR2Shuffle(:,1), allR2'];
% T = array2table(lfadsr, 'VariableNames',{'shuffled','meanR'});
% writetable(T, '~/Desktop/sourceData/LFADS_analysis/lfadsr.xlsx')